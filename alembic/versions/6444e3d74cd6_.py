"""empty message

Revision ID: 6444e3d74cd6
Revises: 
Create Date: 2025-06-19 14:07:26.332118

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6444e3d74cd6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

functions = """
CREATE OR REPLACE FUNCTION add_car(
    p_make VARCHAR,
    p_model VARCHAR,
    p_year INT,
    p_price_per_day DECIMAL
) RETURNS VOID AS $$
BEGIN
    INSERT INTO Cars (make, model, year, price_per_day, available)
    VALUES (p_make, p_model, p_year, p_price_per_day, TRUE);
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION add_customer(
    p_first_name VARCHAR,
    p_last_name VARCHAR,
    p_email VARCHAR,
    p_phone VARCHAR
) RETURNS VOID AS $$
BEGIN
    INSERT INTO Customers (first_name, last_name, email, phone)
    VALUES (p_first_name, p_last_name, p_email, p_phone);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION rent_car(
    p_car_id INT,
    p_customer_id INT,
    p_start_date DATE,
    p_end_date DATE
) RETURNS VOID AS $$
DECLARE
    v_price DECIMAL;
    v_total_days INT;
BEGIN
    SELECT price_per_day INTO v_price FROM Cars WHERE id = p_car_id;
    IF v_price IS NULL OR NOT EXISTS (SELECT 1 FROM Cars WHERE id = p_car_id AND available) THEN
        RAISE EXCEPTION 'Car not available for rent';
    END IF;
    v_total_days := (p_end_date - p_start_date);
    INSERT INTO Rentals (car_id, customer_id, start_date, end_date, total_price)
    VALUES (p_car_id, p_customer_id, p_start_date, p_end_date, v_price * v_total_days);
    UPDATE Cars SET available = FALSE WHERE id = p_car_id;
END;
$$ LANGUAGE plpgsql;
"""

def upgrade() -> None:
    op.execute(functions)
    
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cars',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('make', sa.String(length=50), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('price_per_day', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('available', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=15), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('rentals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('car_id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rentals')
    op.drop_table('customers')
    op.drop_table('cars')
    # ### end Alembic commands ###
